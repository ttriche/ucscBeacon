#!/usr/bin/env python
# A beacon for tracks we can't distribute: LOVD and HGMD
# see ga4gh.org/#/beacon and redmine 14393
# Please do read the GA4GH website on the background of this CGI, otherwise
# the functionality provided does not make any sense, without the context

import cgi, subprocess, sys, cgitb, os, socket, time, json, glob, urlparse
from os.path import join, isfile, dirname, isdir, basename

# dir for bigBed files
# DATADIR = "/gbdb/hg19/beacon" # for UCSC
DATADIR = "data" # for GA4GH

# dir of the CGIs relative to REQUEST_URI
#cgiDir = ".." # symlinks are one level below the main cgi-bin dir
cgiDir = "." # symlinks are in the current dir, for GA4GH

# cache of hg.conf dict
hgConf = None

# descriptions of some datasets we know of
DataSetDescs = {
"hgmd" : "Human Genome Variation Database, public version, provided by Biobase",
"lovd" : "Leiden Open Varation Database installations that agreed to share their variants",
"test" : "small test data on Chromosome 1, copied from ClinVar"
}

# default dataset if none specified in request
#DEFAULTDATASET = "lovd"
DEFAULTDATASET = "test" # GA4GH

# general info about this beacon
hostName = os.environ.get("HTTP_HOST", "localhost")
homepage = "http://%s/cgi-bin/hgBeacon" % hostName
beaconDesc = {
    "id":"ucsc-browser", \
    "name":"Genome Browser", \
    "organization" : "UCSC", \
    "description" : "UCSC Genome Browser",
    "api" : "0.2",
    "homepage": homepage
    }
# the list genome reference we support
beaconReferences = ["GRCh37"]

def queryBottleneck(host, port, ip):
    " contact UCSC-style bottleneck server to get current delay time "
    # send ip address
    s =  socket.socket()
    s.connect((host, int(port)))
    msg = ip
    d = chr(len(msg))+msg
    s.send(d)

    # read delay time
    expLen = ord(s.recv(1))
    totalLen = 0
    buf = list()
    while True:
        resp = s.recv(1024)
        buf.append(resp)
        totalLen+= len(resp)
        if totalLen==expLen:
            break
    return int("".join(buf))

def parseConf(fname):
    " parse a hg.conf style file, return as dict key -> value (both are strings) "
    conf = {}
    for line in open(fname):
        line = line.strip()
        if line.startswith("#"):
            continue
        elif line.startswith("include "):
            inclFname = line.split()[1]
            inclPath = join(dirname(fname), inclFname)
            if isfile(inclPath):
                inclDict = parseConf(inclPath)
                conf.update(inclDict)
        elif "=" in line: # string search for "="
            key, value = line.split("=")
            conf[key] = value
    return conf

def parseHgConf(confDir="."):
    """ return hg.conf as dict key:value """
    global hgConf
    if hgConf is not None:
        return hgConf

    hgConf = dict() # python dict = hash table

    currDir = dirname(__file__)
    fname = join(currDir, confDir, "hg.conf")
    if not isfile(fname):
        fname = join(currDir, "hg.conf")
    if not isfile(fname):
        return {}
    hgConf = parseConf(fname)

    return hgConf

def errAbort(errMsg=None):
    " exit with error message "
    if errMsg == None:
        sys.exit(0)

    helpUrl = "http://%s/cgi-bin/hgBeacon?page=help" % hostName

    ret = {"errormsg":errMsg, 
        "more_info":"for a complete description of the parameters, read the help message at %s" % helpUrl}
    printJson(ret)
    sys.exit(0)

def printHelp():
    " print help text to stdout and exit "
    print "<html><body>"
    host = hostName # convert from global to local var
    if ".ucsc.edu" in host:
        fname = "helpUcsc.txt"
    else:
        fname = "help.txt"
    helpText = open(fname).read()
    print helpText % locals()
    print "</body></html>"
    sys.exit(0)

def dataSetResources():
    " Returns the list of DataSetResources "
    totalSize = 0
    dsrList = []
    for fname in glob.glob(join(DATADIR, "*.bb")):
        args = ["%s/utils/bigBedInfo" % cgiDir, fname]
        p = subprocess.Popen(args, stdout=subprocess.PIPE)
        for l in p.stdout:
            if l.startswith("itemCount"):
                itemCount = int(l.strip().split()[1].replace(",",""))
        # the dataset ID is just the file basename without extension
        dsId = basename(fname).split(".")[0]
        dsr = (dsId, DataSetDescs.get(dsId, ""), itemCount)
        dsrList.append(dsr)
        totalSize += itemCount
    return totalSize, dsrList

def beaconInfo():
    " return a beaconInfo dict "
    size, dsrList = dataSetResources()
    return \
        {
        "beacon": beaconDesc,
        "references": beaconReferences,
        "datasets": dsrList,
        "size": size
        }

def printJson(data):
    print json.dumps(data, indent=4, sort_keys=True,separators=(',', ': '))

def hgBotDelay():
    " implement bottleneck delay, get bottleneck server from hg.conf "
    global hgConf
    hgConf = parseHgConf("..")
    if "bottleneck.host" not in hgConf:
        return
    ip = os.environ["REMOTE_ADDR"]
    delay = queryBottleneck(hgConf["bottleneck.host"], hgConf["bottleneck.port"], ip)
    if delay>10000:
        time.sleep(delay/1000.0)
    if delay>20000:
        print("Blocked")
        sys.exit(0)

def lookupAllele(chrom, pos, allele, reference, track):
    " lookup allele and return dict in beacon API format. All parameters are strings or None. "
    # check parameters
    if reference==None or reference=="":
        reference="GRCh37"
    if reference not in beaconReferences:
        errAbort("invalid 'reference' parameter, valid ones are %s" % ",".join(beaconReferences))
    if chrom==None or chrom=="":
        errAbort()
    if allele==None:
        errAbort("missing allele parameter")
    if len(allele)!=1 or allele[0].lower() not in "actgdi":
        errAbort("invalid allele parameter, can only be a single letter and one of ACTGDI")
    if track is None or track=="":
        track = DEFAULTDATASET
    if not track.isalpha():
        errAbort("'dataset' parameter must contain only alphanumeric characters")

    if pos==None or not pos.isdigit():
        errAbort("'position' parameter is not a number")
    pos = int(pos)

    # convert chrom to hg19 format
    if chrom==None:
        errAbort( "missing chromosome parameter")
    if not ((chrom.isdigit() and int(chrom)>=1 and int(chrom)<=22) or chrom in ["X","Y","M"]):
        errAbort( "invalid chromosome name %s" % chrom)
    if not chrom.startswith("chr"):
        chrom = "chr"+chrom
        
    # upcase allele
    allele = allele.upper()

    # resolve dataset to filename
    trackFname = join(DATADIR, track+".bb")
    if not isfile(trackFname):
        errAbort("illegal dataset/track name %s" % track)

    # run tool
    args = ["%s/utils/bigBedToBed" % cgiDir, trackFname, "stdout", "-chrom=%s"%chrom, "-start=%d"%pos, "-end=%d"%(pos+1)]
    try:
        p = subprocess.Popen(args, stdout=subprocess.PIPE)
    except OSError:
        errAbort("Cannot run the command %s. Make sure you can run these binaries from a command line and they are executable by apache" % repr(args))

    # parse output
    exists = "null"
    for line in p.stdout:
        exists = "overlap"
        fs = line.rstrip("\n").split("\t")
        if len(fs)==3:
            # if no name field, can only return overlap
            exists = "overlap"
        else:
            obsAllele = fs[3][-1] # last letter of name field
            if obsAllele==allele:
                exists="true"
            else:
                exists="false"

    query = {
        "allele": allele,
        "chromosome": chrom.replace("chr",""),
        "position": pos,
        "reference": reference,
        "dataset": track
        }

    response = {"exists" : exists}

    ret = {"beacon" : beaconDesc, "query" : query, "response" : response}
    return ret


def main():
    print "Content-Type: text/html\n"

    if not isdir(DATADIR):
        errAbort("hgBeacon is intended to be run at UCSC. <br> On this "
            "machine the directory %s does not exist so the program will not run.<p>" \
            % DATADIR)

    url = os.environ["REQUEST_URI"] 
    parsedUrl = urlparse.urlparse(url) 

    # get CGI parameters
    form = cgi.FieldStorage()

    # react based on symlink that was used to call this script
    page = parsedUrl[2].split("/")[-1] # last part of path is REST endpoint
    if page=="info":
        printJson(beaconInfo())
        sys.exit(0)

    hgBotDelay()

    track = form.getfirst("dataset")
    if track is None:
        track = form.getfirst("track")

    chrom = form.getfirst("chromosome")
    pos = form.getfirst("position")
    allele = form.getfirst("allele")
    reference = form.getfirst("reference")

    if chrom==None and pos==None and allele==None:
        printHelp()
        sys.exit(0)

    ret = lookupAllele(chrom, pos, allele, reference, track)

    if form.getfirst("format")=="text":
        print ret["response"]["exists"]
    else:
        printJson(ret)

if __name__=="__main__":
    # deactivate this on the RR, but useful for debugging: prints a http header
    # on errors 
    cgitb.enable()
    main()
